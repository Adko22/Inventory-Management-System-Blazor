@page "/editinventory/{InvId:int}"
@inject IViewInvenotryByIdUseCase ViewInvenotryByIdUseCase
@inject IEditInventoryUseCase EditInventoryUseCase
@inject NavigationManager NavigationManager

@attribute [Authorize(Policy = "Inventory")]


<h3>Edit Inventory</h3>
<br />

<EditForm Model="@inventory" OnValidSubmit="@SaveInventory">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="from-group">
        <label for="name">Inventory Name</label>
        <InputText id="name" @bind-Value="@inventory.InventoryName" class="form-control"></InputText>
    </div>
    <br />
    <div class="from-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="@inventory.Quantity" class="form-control"></InputNumber>
    </div>
    <br />
    <div class="from-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="@inventory.Price" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public int InvId { get; set; }

    private Inventory inventory = new Inventory();

    protected override async Task OnParametersSetAsync()
    {
        this.inventory = await ViewInvenotryByIdUseCase.ExecuteAsync(this.InvId);
    }

    private async Task SaveInventory()
    {
        await EditInventoryUseCase.ExecuteAsync(this.inventory);
        NavigationManager.NavigateTo("/inventories");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/inventories");
    }

}
