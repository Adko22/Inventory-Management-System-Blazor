@page "/produce"
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IProduceProductUseCase ProduceProductUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IJSRuntime JSRuntime

@attribute [Authorize(Policy = "Productions")]

<h3>Produce Product</h3>
<br />
<EditForm id="produce-form" Model="produceViewModel" OnValidSubmit="Produce">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <label for="po">Production #</label>
                <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
            </div>
            <br />
            <div class="form-group">
                <AutoCompleteComponent Label="Product to Produce"
                                       SearchFunction="SearchProduct"
                                       OnItemSelected="OnItemSelected"></AutoCompleteComponent>
                <input type="hidden" value="@produceViewModel.ProductId" />
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Produce</button>
</EditForm>


@code {
    private AuthenticationState authenticationState;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product? selectedProduct = null;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
        {
            authenticationState = await authenticationStateTask;
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmition", "produce-form");
        }
    }

    private async Task Produce()
    {
        if (selectedProduct != null && authenticationState != null 
            && !string.IsNullOrWhiteSpace(authenticationState.User?.Identity?.Name))
        {
            await ProduceProductUseCase.ExecuteAsync(
                  produceViewModel.ProductionNumber,
                  selectedProduct,
                  produceViewModel.QuantityToProduce, authenticationState.User.Identity.Name);
        }

        produceViewModel = new ProduceViewModel();
        selectedProduct = null;
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var list = await ViewProductsByNameUseCase.ExecuteAsync(name);

        if (list == null)
        {
            return null;
        }

        return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);
        produceViewModel.ProductId = item.Id;
        produceViewModel.Product = selectedProduct;
    }
}
