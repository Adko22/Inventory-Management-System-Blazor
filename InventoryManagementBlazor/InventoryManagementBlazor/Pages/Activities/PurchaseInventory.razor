@page "/purchase"

@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase
@inject IViewInventoriesByNameUseCase ViewInventoryByNameUseCase
@inject IViewInvenotryByIdUseCase ViewInventoryByIdUseCase


<h3>Purchase Inventory</h3>
<br />
<EditForm Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <label for="po">Purchase Order #</label>
                <InputText id="po" @bind-Value="purchaseViewModel.PONumber" class="form-control"></InputText>
            </div>
            <br />
            <div class="form-group">
                <AutoCompleteComponent Label="Inventory to Purchase"
                                       SearchFunction="SearchInventory"
                                       OnItemSelected="OnItemSelected"></AutoCompleteComponent>
                <input type="hidden" value="@purchaseViewModel.InventoryId" />
                @if (purchaseViewModel.InventoryId > 0 && purchaseViewModel.InventoryPrice >= 0)
                {
                    <text>Price:</text>
                    @purchaseViewModel.InventoryPrice.ToString("C")
                    ;

                }
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Purchase</button>
</EditForm>




@code {
    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();

    private Inventory? selectedInventory = null;

    private async Task Purchase()
    {
        await PurchaseInventoryUseCase.ExecutAsync(
            purchaseViewModel.PONumber,
            selectedInventory,
            purchaseViewModel.QuantityToPurchase, "Frank"
        );

        purchaseViewModel = new PurchaseViewModel();
        selectedInventory = null;
    }

    private List<ItemViewModel>? SearchInventory(string name)
    {
        var list = ViewInventoryByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();

        if (list == null)
        {
            return null;
        }

        return list.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        selectedInventory = await ViewInventoryByIdUseCase.ExecuteAsync(item.Id);
        purchaseViewModel.InventoryId = item.Id;
        purchaseViewModel.InventoryPrice = selectedInventory.Price;

    }
}
