@page "/editproduct/{ProdId:int}"
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

@attribute [Authorize(Policy = "Inventory")]

<h3>Edit Product</h3>

<br />
@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="SaveProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="from-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="@product.ProductName" class="form-control"></InputText>
        </div>
        <br />
        <div class="from-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="@product.Quantity" class="form-control"></InputNumber>
        </div>
        <br />
        <div class="from-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="@product.Price" class="form-control"></InputNumber>
        </div>
        <br />
        <div class="form-group">
            <label for="invs">Inventories</label>
            <ProductInventoriesComponent Product="product"></ProductInventoriesComponent>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
    </EditForm>
}
@code {
    private Product? product;

    [Parameter]
    public int ProdId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        product = await ViewProductByIdUseCase.ExecuteAsync(ProdId);
    }

    private async Task SaveProduct()
    {
        if (product != null)
        {
            await EditProductUseCase.ExecuteAsync(product);
            NavigationManager.NavigateTo("/products");
        }

    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}
